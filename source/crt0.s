// SPDX-License-Identifier: Zlib
// SPDX-FileNotice: Modified from the original version by the BlocksDS project.
//
// Copyright (C) 2020 Gericom
// Copyright (C) 2023 Antonio Niño Díaz
//
// Autogenerated file: Do not edit!

.section .text.start
.global _start
_start:
    br      start, always
    br      trapHandlerAsm, always
    br      nmiHandlerAsm, always
    br      irqHandlerInt0Asm, always
    nop
    nop
    nop
    nop
    nop
    nop
    br      irqHandlerInt1Asm, always
    nop
    nop
    nop
    nop
    nop
    nop
    br      irqHandlerInt2Asm, always
.text
start:
    dint
    mov     0x0, mod3
    mov     0, prpage
    nop
    nop
    mov     0, sp
    addv    0x4ff, sp
    mov     0x0, mod3
    call    initConfigRegs, always
    call    initConfigRegsShadow, always
    dint
    call    main, always
exit:
    br      exit, always
initConfigRegs:
    rst     0x6ce3, mod0
    set     0x3, mod0
    load    0u8, page
    rst     0xd000, mod1
    set     0x2000, mod1
    mov     0, mod2
    mov     0, cfgi
    mov     0, cfgj
    mov     0, stepi0
    mov     0, stepj0
    mov     0x110c, ar0
    mov     0x55ab, ar1
    mov     0x21, arp0
    mov     0x258c, arp1
    mov     0x4ab5, arp2
    mov     0x442, arp3
    ret     always
initConfigRegsShadow:
    cntx    s
    mov     0x1, st0
    mov     0x0, st1
    mov     0x0, st2
    mov     0x110c, ar0
    mov     0x55ab, ar1
    mov     0x21, arp0
    mov     0x258c, arp1
    mov     0x4ab5, arp2
    mov     0x442, arp3
    cntx    r
    ret     always
.global nmiHandlerAsm
.weak nmiHandlerAsm
nmiHandlerAsm:
    cntx    s
    rst     0x80, mod0
    retic   always
.global trapHandlerAsm
.weak trapHandlerAsm
trapHandlerAsm:
    push    stt0
    push    r0
    mov     0x8204, r0
    set     0x400, [r0]
    rst     0x400, [r0]
    pop     r0
    pop     stt0
    reti    always
.global irqHandlerInt0Asm
.weak irqHandlerInt0Asm
irqHandlerInt0Asm:
    cntx    s
    load    0, ps01
    rst     0x80, mod0
    push    a0e
    pusha   a0
    push    a1e
    pusha   a1
    push    b0e
    pusha   b0
    push    b1e
    pusha   b1
    push    p0
    push    p1
    push    sv
    push    r0
    call    irqHandlerInt0, always
    pop     r0
    pop     sv
    pop     p1
    pop     p0
    popa    b1
    pop     b1e
    popa    b0
    pop     b0e
    popa    a1
    pop     a1e
    popa    a0
    pop     a0e
    retic   always
.global irqHandlerInt1Asm
.weak irqHandlerInt1Asm
irqHandlerInt1Asm:
    cntx    s
    load    0, ps01
    rst     0x80, mod0
    push    a0e
    pusha   a0
    push    a1e
    pusha   a1
    push    b0e
    pusha   b0
    push    b1e
    pusha   b1
    push    p0
    push    p1
    push    sv
    push    r0
    call    irqHandlerInt1, always
    pop     r0
    pop     sv
    pop     p1
    pop     p0
    popa    b1
    pop     b1e
    popa    b0
    pop     b0e
    popa    a1
    pop     a1e
    popa    a0
    pop     a0e
    retic   always
.global irqHandlerInt2Asm
.weak irqHandlerInt2Asm
irqHandlerInt2Asm:
    cntx    s
    load    0, ps01
    rst     0x80, mod0
    push    a0e
    pusha   a0
    push    a1e
    pusha   a1
    push    b0e
    pusha   b0
    push    b1e
    pusha   b1
    push    p0
    push    p1
    push    sv
    push    r0
    call    irqHandlerInt2, always
    pop     r0
    pop     sv
    pop     p1
    pop     p0
    popa    b1
    pop     b1e
    popa    b0
    pop     b0e
    popa    a1
    pop     a1e
    popa    a0
    pop     a0e
    retic   always
.global trapHandler
.weak trapHandler
trapHandler:
    ret     always
.global irqHandlerInt0
.weak irqHandlerInt0
irqHandlerInt0:
    ret     always
.global irqHandlerInt1
.weak irqHandlerInt1
irqHandlerInt1:
    ret     always
.global irqHandlerInt2
.weak irqHandlerInt2
irqHandlerInt2:
    ret     always
