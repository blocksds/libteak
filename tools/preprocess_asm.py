#!/usr/bin/env python3

# SPDX-License-Identifier: Zlib
#
# Copyright (c) 2023 Antonio Niño Díaz <antonio_nd@outlook.com>

def preprocess_teak_crt0(input_file, output_file):

    with open(input_file, 'r') as in_file, open(output_file, 'w') as out_file:

        out_file.write("""\
// SPDX-License-Identifier: Zlib
// SPDX-FileNotice: Modified from the original version by the BlocksDS project.
//
// Copyright (C) 2020 Gericom
// Copyright (C) 2023 Antonio Niño Díaz
//
// Autogenerated file: Do not edit!

""")

        for line in in_file:
            # Remove comments
            line = line.split('#')[0]

            # Remove leading and trailing whitespace
            line = line.strip()

            # Ignore empty lines
            if len(line) == 0:
                continue

            # Directives
            if line.startswith('.'):
                out_file.write(f"{line}\n")
                continue

            # Labels
            if line.endswith(':'):
                out_file.write(f"{line}\n")
                continue

            if line.startswith('BEGIN_ASM_FUNC'):
                out_file.write(f"\n{line}\n\n")
                continue

            # This should only be an instruction and its arguments

            tokens = line.split(maxsplit=1)

            if len(tokens) == 0:
                continue

            # Instruction without arguments
            if len(tokens) == 1:
                out_file.write(f"    {line}\n")
                continue

            # Get mnemonic and split it from the arguments
            mnemonic = tokens[0].ljust(8, ' ')
            out_file.write(f"    {mnemonic}")

            arguments = tokens[1]

            # Parse each argument individually
            result_args = []
            args = arguments.split(',')
            for arg in args:
                # Remove leading and trailing whitespace
                arg = arg.strip()

                # Determine if this is an expression or not
                ops = ["+", "-", "<<", ">>", "|", "&", "~", "*", "/", "(", ")"]
                is_expression = False

                for op in ops:
                    if op in arg:
                        is_expression = True
                        break

                if is_expression:
                    result_args.append(hex(eval(arg)))
                else:
                    result_args.append(arg)

            result = ', '.join(result_args)
            out_file.write(f"{result}\n")

    return

if __name__ == "__main__":

    import argparse
    import sys
    import traceback

    print("preprocess_teak_crt0 v0.1.0")
    print("Copyright (c) 2023 Antonio Niño Díaz <antonio_nd@outlook.com>")
    print("All rights reserved")
    print("")

    parser = argparse.ArgumentParser(
            description='Preprocess the DS Teak crt0.')

    # Required arguments
    parser.add_argument("--input", required=True, help="input file")
    parser.add_argument("--output", required=True, help="output file")

    args = parser.parse_args()

    try:
        preprocess_teak_crt0(args.input, args.output)
    except BaseException as e:
        print("ERROR: " + str(e))
        traceback.print_exc()
        sys.exit(1)

    print("Done!")

    sys.exit(0)
